// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Media{
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  TMDBID  String
  title   String
  poster_path   String
  genres  String[]
  mediaType String

  collections Collection[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  groupIDs  String[]  @db.ObjectId
  groups    Group[]   @relation(fields: [groupIDs], references: [id]) //not in DB
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String

  userIDs   String[] @db.ObjectId
  users     User[]   @relation(fields: [userIDs], references: [id]) //not in DB

  collection Collection[]

}


//users
//media
//Groups
//addedMedia - id, group id, movie id, watched, added by? reason?
//comments - id, addedMedia id, userid, comment 

model Collection {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  groupId           String    @db.ObjectId
  groupIdRelation   Group     @relation(fields: [groupId], references: [id])
  mediaId           String    @db.ObjectId
  mediaRelation     Media     @relation(fields: [mediaId], references: [id])
  watched           Boolean
  added_reason      String
  // added_by_Id       User      @relation(fields: [added_by], references: [id])
  // added_by          String    @db.ObjectId 
  comments          Comments[]
}

type Comments {
  userID String
  comment String
}

model Invitation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  groupId           String
  invitedUserEmail  String
  invitationToken   String @unique
  expires           DateTime
}

//NextAuth Requirements:
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String 
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


//any additional changes, we'll need to manually invoke npx prisma generate 