// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tmdb_id     String    @unique
  title       String
  poster_path String
  genres      String[]
  mediaType   String

  added_media added_media[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  groupIDs String[] @db.ObjectId
  groups   Group[]  @relation(fields: [groupIDs], references: [id]) //not in DB

  comments Comment[]
  added_media added_media[]
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  userIDs String[] @db.ObjectId
  users   User[]   @relation(fields: [userIDs], references: [id]) //not in DB

  added_media added_media[]
}

model added_media {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  groupId                 String     @db.ObjectId
  groupIdRelation         Group      @relation(fields: [groupId], references: [id]) //not in db
  mediaId                 String     @db.ObjectId
  mediaRelation           Media      @relation(fields: [mediaId], references: [id]) //not in db
  watched                 Boolean

  added_by                String @db.ObjectId
  added_by_relation       User    @relation(fields: [added_by], references: [id]) //not in db
  added_reason            String

  comments                Comment[]
}

model Comment {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id  String  @db.ObjectId
  user_id_relation  User @relation(fields: [user_id], references: [id])
  added_media String @db.ObjectId
  added_media_relation added_media @relation(fields: [user_id], references: [id])
  comment String
}

model Invitation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId          String
  invitedUserEmail String
  invitationToken  String   @unique
  expires          DateTime
}

//NextAuth Requirements:
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//any additional changes, we'll need to manually invoke npx prisma generate 
